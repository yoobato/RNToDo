{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","console","error","getItem","s","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","input","returnKeyType","placeholder","value","onChangeText","payload","onSubmitEditing","newToDos","Date","now","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","flexDirection","justifyContent","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.3b3f9667.chunk.js","sourcesContent":["export const theme = {\n  bg: 'black',\n  grey: '#3a3d40',\n  toDoBg: '#1a1c20',\n};\n","import { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport { Alert, Platform, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\nimport { Fontisto } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { theme } from './colors';\n\nconst STORAGE_KEY = '@toDos';\n\n// TODO: Code Challenge\n// TODO: (1) Work, Travel 중에 종료된 곳에서 시작 (AsyncStorage\n// TODO: (2) TODO Completed 추가 (아이콘 추가)\n// TODO: (3) TODO Text 수정 기능 추가 (아이콘 추가, 수정하는 동안 TextInput으로 교체해서 보여주자?)\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState('');\n  const [toDos, setToDos] = useState({});\n\n  useEffect(() => {\n    loadToDos();\n  }, []);\n\n  const work = () => setWorking(true);\n  const travel = () => setWorking(false);\n\n  const onChangeText = (payload) => setText(payload);\n\n  const saveToDos = async (toSave) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      // TODO: Saving Error\n      console.error(e);\n    }\n  };\n\n  // TODO: ToDo 로딩하는 동안 ActivityIndicator 추가\n  const loadToDos = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      if (s) {\n        setToDos(JSON.parse(s));\n      }\n    } catch (e) {\n      // TODO: Reading Error\n      console.error(e);\n    }\n  };\n\n  const addToDo = async () => {\n    if (text === '') {\n      return;\n    }\n\n    // 새로운 ToDo를 추가할 때, toDos state를 직접 수정할 수 없다.\n    // 따라서, Object.assign을 써서 두 개의 Object를 합친 새로운 Object를 만든다.\n    // ToDo object는 현재 일시를 key로 갖고, text와 working을 value로 가진다.\n    const newToDos = Object.assign({}, toDos, {\n      [Date.now()]: { text, working }\n    });\n    // 아래처럼 ES6 문법을 사용할 수도 있다.\n    // const newToDos = {\n    //   ...toDos,\n    //   [Date.now()]: {text, work: working},\n    // };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    \n    setText('');\n  };\n\n  const deleteToDo = (key) => {\n    if (Platform.OS === 'web') {\n      const ok = confirm('Do you want to delete this To Do?');\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert('Delete To Do?', 'Are you sure?', [\n        { text: 'Cancel' },\n        {\n          text: \"I'm sure\",\n          onPress: async () => {\n            const newToDos = { ...toDos };\n            // 아직 state가 되지 않았기 때문에 mutate 가능\n            delete newToDos[key];\n\n            setToDos(newToDos);\n            await saveToDos(newToDos);\n          },\n          style: 'destructive',   // iOS Only\n        },\n      ]);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style='light' /> \n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text \n            style={{ \n              fontSize: 38,\n              fontWeight: '600',\n              color: working ? 'white' : theme.grey \n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n        <Text \n            style={{ \n              fontSize: 38,\n              fontWeight: '600',\n              color: !working ? 'white' : theme.grey \n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput \n        style={styles.input} \n        returnKeyType='done'\n        placeholder={working ? 'Add a To Do' : 'Where do you want to go?'}\n        value={text}\n        onChangeText={onChangeText}\n        onSubmitEditing={addToDo}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map(key => (\n          toDos[key].working === working ? (\n            <View key={key} style={styles.toDo}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Fontisto name='trash' size={18} color={theme.grey} />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        ))}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: 'white',\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  toDoText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '500',\n  },\n});\n"],"sourceRoot":""}